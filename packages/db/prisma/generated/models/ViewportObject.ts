
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ViewportObject` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ViewportObject
 * 
 */
export type ViewportObjectModel = runtime.Types.Result.DefaultSelection<Prisma.$ViewportObjectPayload>

export type AggregateViewportObject = {
  _count: ViewportObjectCountAggregateOutputType | null
  _min: ViewportObjectMinAggregateOutputType | null
  _max: ViewportObjectMaxAggregateOutputType | null
}

export type ViewportObjectMinAggregateOutputType = {
  id: string | null
  group_id: string | null
  image_url: string | null
  user_id: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type ViewportObjectMaxAggregateOutputType = {
  id: string | null
  group_id: string | null
  image_url: string | null
  user_id: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type ViewportObjectCountAggregateOutputType = {
  id: number
  group_id: number
  objects: number
  image_url: number
  user_id: number
  created_at: number
  updated_at: number
  _all: number
}


export type ViewportObjectMinAggregateInputType = {
  id?: true
  group_id?: true
  image_url?: true
  user_id?: true
  created_at?: true
  updated_at?: true
}

export type ViewportObjectMaxAggregateInputType = {
  id?: true
  group_id?: true
  image_url?: true
  user_id?: true
  created_at?: true
  updated_at?: true
}

export type ViewportObjectCountAggregateInputType = {
  id?: true
  group_id?: true
  objects?: true
  image_url?: true
  user_id?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type ViewportObjectAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ViewportObject to aggregate.
   */
  where?: Prisma.ViewportObjectWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ViewportObjects to fetch.
   */
  orderBy?: Prisma.ViewportObjectOrderByWithRelationInput | Prisma.ViewportObjectOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ViewportObjectWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ViewportObjects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ViewportObjects.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ViewportObjects
  **/
  _count?: true | ViewportObjectCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ViewportObjectMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ViewportObjectMaxAggregateInputType
}

export type GetViewportObjectAggregateType<T extends ViewportObjectAggregateArgs> = {
      [P in keyof T & keyof AggregateViewportObject]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateViewportObject[P]>
    : Prisma.GetScalarType<T[P], AggregateViewportObject[P]>
}




export type ViewportObjectGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ViewportObjectWhereInput
  orderBy?: Prisma.ViewportObjectOrderByWithAggregationInput | Prisma.ViewportObjectOrderByWithAggregationInput[]
  by: Prisma.ViewportObjectScalarFieldEnum[] | Prisma.ViewportObjectScalarFieldEnum
  having?: Prisma.ViewportObjectScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ViewportObjectCountAggregateInputType | true
  _min?: ViewportObjectMinAggregateInputType
  _max?: ViewportObjectMaxAggregateInputType
}

export type ViewportObjectGroupByOutputType = {
  id: string
  group_id: string
  objects: runtime.JsonValue[]
  image_url: string | null
  user_id: string
  created_at: Date
  updated_at: Date
  _count: ViewportObjectCountAggregateOutputType | null
  _min: ViewportObjectMinAggregateOutputType | null
  _max: ViewportObjectMaxAggregateOutputType | null
}

type GetViewportObjectGroupByPayload<T extends ViewportObjectGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ViewportObjectGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ViewportObjectGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ViewportObjectGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ViewportObjectGroupByOutputType[P]>
      }
    >
  >



export type ViewportObjectWhereInput = {
  AND?: Prisma.ViewportObjectWhereInput | Prisma.ViewportObjectWhereInput[]
  OR?: Prisma.ViewportObjectWhereInput[]
  NOT?: Prisma.ViewportObjectWhereInput | Prisma.ViewportObjectWhereInput[]
  id?: Prisma.StringFilter<"ViewportObject"> | string
  group_id?: Prisma.StringFilter<"ViewportObject"> | string
  objects?: Prisma.JsonNullableListFilter<"ViewportObject">
  image_url?: Prisma.StringNullableFilter<"ViewportObject"> | string | null
  user_id?: Prisma.StringFilter<"ViewportObject"> | string
  created_at?: Prisma.DateTimeFilter<"ViewportObject"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"ViewportObject"> | Date | string
}

export type ViewportObjectOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  group_id?: Prisma.SortOrder
  objects?: Prisma.SortOrder
  image_url?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ViewportObjectWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ViewportObjectWhereInput | Prisma.ViewportObjectWhereInput[]
  OR?: Prisma.ViewportObjectWhereInput[]
  NOT?: Prisma.ViewportObjectWhereInput | Prisma.ViewportObjectWhereInput[]
  group_id?: Prisma.StringFilter<"ViewportObject"> | string
  objects?: Prisma.JsonNullableListFilter<"ViewportObject">
  image_url?: Prisma.StringNullableFilter<"ViewportObject"> | string | null
  user_id?: Prisma.StringFilter<"ViewportObject"> | string
  created_at?: Prisma.DateTimeFilter<"ViewportObject"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"ViewportObject"> | Date | string
}, "id">

export type ViewportObjectOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  group_id?: Prisma.SortOrder
  objects?: Prisma.SortOrder
  image_url?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  _count?: Prisma.ViewportObjectCountOrderByAggregateInput
  _max?: Prisma.ViewportObjectMaxOrderByAggregateInput
  _min?: Prisma.ViewportObjectMinOrderByAggregateInput
}

export type ViewportObjectScalarWhereWithAggregatesInput = {
  AND?: Prisma.ViewportObjectScalarWhereWithAggregatesInput | Prisma.ViewportObjectScalarWhereWithAggregatesInput[]
  OR?: Prisma.ViewportObjectScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ViewportObjectScalarWhereWithAggregatesInput | Prisma.ViewportObjectScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ViewportObject"> | string
  group_id?: Prisma.StringWithAggregatesFilter<"ViewportObject"> | string
  objects?: Prisma.JsonNullableListFilter<"ViewportObject">
  image_url?: Prisma.StringNullableWithAggregatesFilter<"ViewportObject"> | string | null
  user_id?: Prisma.StringWithAggregatesFilter<"ViewportObject"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"ViewportObject"> | Date | string
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"ViewportObject"> | Date | string
}

export type ViewportObjectCreateInput = {
  id?: string
  group_id: string
  objects?: Prisma.ViewportObjectCreateobjectsInput | runtime.InputJsonValue[]
  image_url?: string | null
  user_id: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type ViewportObjectUncheckedCreateInput = {
  id?: string
  group_id: string
  objects?: Prisma.ViewportObjectCreateobjectsInput | runtime.InputJsonValue[]
  image_url?: string | null
  user_id: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type ViewportObjectUpdateInput = {
  group_id?: Prisma.StringFieldUpdateOperationsInput | string
  objects?: Prisma.ViewportObjectUpdateobjectsInput | runtime.InputJsonValue[]
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ViewportObjectUncheckedUpdateInput = {
  group_id?: Prisma.StringFieldUpdateOperationsInput | string
  objects?: Prisma.ViewportObjectUpdateobjectsInput | runtime.InputJsonValue[]
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ViewportObjectCreateManyInput = {
  id?: string
  group_id: string
  objects?: Prisma.ViewportObjectCreateobjectsInput | runtime.InputJsonValue[]
  image_url?: string | null
  user_id: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type ViewportObjectUpdateManyMutationInput = {
  group_id?: Prisma.StringFieldUpdateOperationsInput | string
  objects?: Prisma.ViewportObjectUpdateobjectsInput | runtime.InputJsonValue[]
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ViewportObjectUncheckedUpdateManyInput = {
  group_id?: Prisma.StringFieldUpdateOperationsInput | string
  objects?: Prisma.ViewportObjectUpdateobjectsInput | runtime.InputJsonValue[]
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JsonNullableListFilter<$PrismaModel = never> =
| Prisma.PatchUndefined<
    Prisma.Either<Required<JsonNullableListFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>,
    Required<JsonNullableListFilterBase<$PrismaModel>>
  >
| Prisma.OptionalFlat<Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>

export type JsonNullableListFilterBase<$PrismaModel = never> = {
  equals?: runtime.InputJsonValue[] | Prisma.ListJsonFieldRefInput<$PrismaModel> | null
  has?: runtime.InputJsonValue | Prisma.JsonFieldRefInput<$PrismaModel> | null
  hasEvery?: runtime.InputJsonValue[] | Prisma.ListJsonFieldRefInput<$PrismaModel>
  hasSome?: runtime.InputJsonValue[] | Prisma.ListJsonFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type ViewportObjectCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  group_id?: Prisma.SortOrder
  objects?: Prisma.SortOrder
  image_url?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ViewportObjectMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  group_id?: Prisma.SortOrder
  image_url?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ViewportObjectMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  group_id?: Prisma.SortOrder
  image_url?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ViewportObjectCreateobjectsInput = {
  set: runtime.InputJsonValue[]
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type ViewportObjectUpdateobjectsInput = {
  set?: runtime.InputJsonValue[]
  push?: runtime.InputJsonValue | runtime.InputJsonValue[]
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
  unset?: boolean
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type ViewportObjectSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  group_id?: boolean
  objects?: boolean
  image_url?: boolean
  user_id?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["viewportObject"]>



export type ViewportObjectSelectScalar = {
  id?: boolean
  group_id?: boolean
  objects?: boolean
  image_url?: boolean
  user_id?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type ViewportObjectOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "group_id" | "objects" | "image_url" | "user_id" | "created_at" | "updated_at", ExtArgs["result"]["viewportObject"]>

export type $ViewportObjectPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ViewportObject"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    group_id: string
    objects: runtime.JsonValue[]
    image_url: string | null
    user_id: string
    created_at: Date
    updated_at: Date
  }, ExtArgs["result"]["viewportObject"]>
  composites: {}
}

export type ViewportObjectGetPayload<S extends boolean | null | undefined | ViewportObjectDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ViewportObjectPayload, S>

export type ViewportObjectCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ViewportObjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ViewportObjectCountAggregateInputType | true
  }

export interface ViewportObjectDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ViewportObject'], meta: { name: 'ViewportObject' } }
  /**
   * Find zero or one ViewportObject that matches the filter.
   * @param {ViewportObjectFindUniqueArgs} args - Arguments to find a ViewportObject
   * @example
   * // Get one ViewportObject
   * const viewportObject = await prisma.viewportObject.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ViewportObjectFindUniqueArgs>(args: Prisma.SelectSubset<T, ViewportObjectFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ViewportObjectClient<runtime.Types.Result.GetResult<Prisma.$ViewportObjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ViewportObject that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ViewportObjectFindUniqueOrThrowArgs} args - Arguments to find a ViewportObject
   * @example
   * // Get one ViewportObject
   * const viewportObject = await prisma.viewportObject.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ViewportObjectFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ViewportObjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ViewportObjectClient<runtime.Types.Result.GetResult<Prisma.$ViewportObjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ViewportObject that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ViewportObjectFindFirstArgs} args - Arguments to find a ViewportObject
   * @example
   * // Get one ViewportObject
   * const viewportObject = await prisma.viewportObject.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ViewportObjectFindFirstArgs>(args?: Prisma.SelectSubset<T, ViewportObjectFindFirstArgs<ExtArgs>>): Prisma.Prisma__ViewportObjectClient<runtime.Types.Result.GetResult<Prisma.$ViewportObjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ViewportObject that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ViewportObjectFindFirstOrThrowArgs} args - Arguments to find a ViewportObject
   * @example
   * // Get one ViewportObject
   * const viewportObject = await prisma.viewportObject.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ViewportObjectFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ViewportObjectFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ViewportObjectClient<runtime.Types.Result.GetResult<Prisma.$ViewportObjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ViewportObjects that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ViewportObjectFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ViewportObjects
   * const viewportObjects = await prisma.viewportObject.findMany()
   * 
   * // Get first 10 ViewportObjects
   * const viewportObjects = await prisma.viewportObject.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const viewportObjectWithIdOnly = await prisma.viewportObject.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ViewportObjectFindManyArgs>(args?: Prisma.SelectSubset<T, ViewportObjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ViewportObjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ViewportObject.
   * @param {ViewportObjectCreateArgs} args - Arguments to create a ViewportObject.
   * @example
   * // Create one ViewportObject
   * const ViewportObject = await prisma.viewportObject.create({
   *   data: {
   *     // ... data to create a ViewportObject
   *   }
   * })
   * 
   */
  create<T extends ViewportObjectCreateArgs>(args: Prisma.SelectSubset<T, ViewportObjectCreateArgs<ExtArgs>>): Prisma.Prisma__ViewportObjectClient<runtime.Types.Result.GetResult<Prisma.$ViewportObjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ViewportObjects.
   * @param {ViewportObjectCreateManyArgs} args - Arguments to create many ViewportObjects.
   * @example
   * // Create many ViewportObjects
   * const viewportObject = await prisma.viewportObject.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ViewportObjectCreateManyArgs>(args?: Prisma.SelectSubset<T, ViewportObjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a ViewportObject.
   * @param {ViewportObjectDeleteArgs} args - Arguments to delete one ViewportObject.
   * @example
   * // Delete one ViewportObject
   * const ViewportObject = await prisma.viewportObject.delete({
   *   where: {
   *     // ... filter to delete one ViewportObject
   *   }
   * })
   * 
   */
  delete<T extends ViewportObjectDeleteArgs>(args: Prisma.SelectSubset<T, ViewportObjectDeleteArgs<ExtArgs>>): Prisma.Prisma__ViewportObjectClient<runtime.Types.Result.GetResult<Prisma.$ViewportObjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ViewportObject.
   * @param {ViewportObjectUpdateArgs} args - Arguments to update one ViewportObject.
   * @example
   * // Update one ViewportObject
   * const viewportObject = await prisma.viewportObject.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ViewportObjectUpdateArgs>(args: Prisma.SelectSubset<T, ViewportObjectUpdateArgs<ExtArgs>>): Prisma.Prisma__ViewportObjectClient<runtime.Types.Result.GetResult<Prisma.$ViewportObjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ViewportObjects.
   * @param {ViewportObjectDeleteManyArgs} args - Arguments to filter ViewportObjects to delete.
   * @example
   * // Delete a few ViewportObjects
   * const { count } = await prisma.viewportObject.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ViewportObjectDeleteManyArgs>(args?: Prisma.SelectSubset<T, ViewportObjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ViewportObjects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ViewportObjectUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ViewportObjects
   * const viewportObject = await prisma.viewportObject.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ViewportObjectUpdateManyArgs>(args: Prisma.SelectSubset<T, ViewportObjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one ViewportObject.
   * @param {ViewportObjectUpsertArgs} args - Arguments to update or create a ViewportObject.
   * @example
   * // Update or create a ViewportObject
   * const viewportObject = await prisma.viewportObject.upsert({
   *   create: {
   *     // ... data to create a ViewportObject
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ViewportObject we want to update
   *   }
   * })
   */
  upsert<T extends ViewportObjectUpsertArgs>(args: Prisma.SelectSubset<T, ViewportObjectUpsertArgs<ExtArgs>>): Prisma.Prisma__ViewportObjectClient<runtime.Types.Result.GetResult<Prisma.$ViewportObjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ViewportObjects that matches the filter.
   * @param {ViewportObjectFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const viewportObject = await prisma.viewportObject.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.ViewportObjectFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a ViewportObject.
   * @param {ViewportObjectAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const viewportObject = await prisma.viewportObject.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.ViewportObjectAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of ViewportObjects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ViewportObjectCountArgs} args - Arguments to filter ViewportObjects to count.
   * @example
   * // Count the number of ViewportObjects
   * const count = await prisma.viewportObject.count({
   *   where: {
   *     // ... the filter for the ViewportObjects we want to count
   *   }
   * })
  **/
  count<T extends ViewportObjectCountArgs>(
    args?: Prisma.Subset<T, ViewportObjectCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ViewportObjectCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ViewportObject.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ViewportObjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ViewportObjectAggregateArgs>(args: Prisma.Subset<T, ViewportObjectAggregateArgs>): Prisma.PrismaPromise<GetViewportObjectAggregateType<T>>

  /**
   * Group by ViewportObject.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ViewportObjectGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ViewportObjectGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ViewportObjectGroupByArgs['orderBy'] }
      : { orderBy?: ViewportObjectGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ViewportObjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetViewportObjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ViewportObject model
 */
readonly fields: ViewportObjectFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ViewportObject.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ViewportObjectClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ViewportObject model
 */
export interface ViewportObjectFieldRefs {
  readonly id: Prisma.FieldRef<"ViewportObject", 'String'>
  readonly group_id: Prisma.FieldRef<"ViewportObject", 'String'>
  readonly objects: Prisma.FieldRef<"ViewportObject", 'Json[]'>
  readonly image_url: Prisma.FieldRef<"ViewportObject", 'String'>
  readonly user_id: Prisma.FieldRef<"ViewportObject", 'String'>
  readonly created_at: Prisma.FieldRef<"ViewportObject", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"ViewportObject", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ViewportObject findUnique
 */
export type ViewportObjectFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ViewportObject
   */
  select?: Prisma.ViewportObjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ViewportObject
   */
  omit?: Prisma.ViewportObjectOmit<ExtArgs> | null
  /**
   * Filter, which ViewportObject to fetch.
   */
  where: Prisma.ViewportObjectWhereUniqueInput
}

/**
 * ViewportObject findUniqueOrThrow
 */
export type ViewportObjectFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ViewportObject
   */
  select?: Prisma.ViewportObjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ViewportObject
   */
  omit?: Prisma.ViewportObjectOmit<ExtArgs> | null
  /**
   * Filter, which ViewportObject to fetch.
   */
  where: Prisma.ViewportObjectWhereUniqueInput
}

/**
 * ViewportObject findFirst
 */
export type ViewportObjectFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ViewportObject
   */
  select?: Prisma.ViewportObjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ViewportObject
   */
  omit?: Prisma.ViewportObjectOmit<ExtArgs> | null
  /**
   * Filter, which ViewportObject to fetch.
   */
  where?: Prisma.ViewportObjectWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ViewportObjects to fetch.
   */
  orderBy?: Prisma.ViewportObjectOrderByWithRelationInput | Prisma.ViewportObjectOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ViewportObjects.
   */
  cursor?: Prisma.ViewportObjectWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ViewportObjects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ViewportObjects.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ViewportObjects.
   */
  distinct?: Prisma.ViewportObjectScalarFieldEnum | Prisma.ViewportObjectScalarFieldEnum[]
}

/**
 * ViewportObject findFirstOrThrow
 */
export type ViewportObjectFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ViewportObject
   */
  select?: Prisma.ViewportObjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ViewportObject
   */
  omit?: Prisma.ViewportObjectOmit<ExtArgs> | null
  /**
   * Filter, which ViewportObject to fetch.
   */
  where?: Prisma.ViewportObjectWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ViewportObjects to fetch.
   */
  orderBy?: Prisma.ViewportObjectOrderByWithRelationInput | Prisma.ViewportObjectOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ViewportObjects.
   */
  cursor?: Prisma.ViewportObjectWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ViewportObjects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ViewportObjects.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ViewportObjects.
   */
  distinct?: Prisma.ViewportObjectScalarFieldEnum | Prisma.ViewportObjectScalarFieldEnum[]
}

/**
 * ViewportObject findMany
 */
export type ViewportObjectFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ViewportObject
   */
  select?: Prisma.ViewportObjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ViewportObject
   */
  omit?: Prisma.ViewportObjectOmit<ExtArgs> | null
  /**
   * Filter, which ViewportObjects to fetch.
   */
  where?: Prisma.ViewportObjectWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ViewportObjects to fetch.
   */
  orderBy?: Prisma.ViewportObjectOrderByWithRelationInput | Prisma.ViewportObjectOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ViewportObjects.
   */
  cursor?: Prisma.ViewportObjectWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ViewportObjects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ViewportObjects.
   */
  skip?: number
  distinct?: Prisma.ViewportObjectScalarFieldEnum | Prisma.ViewportObjectScalarFieldEnum[]
}

/**
 * ViewportObject create
 */
export type ViewportObjectCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ViewportObject
   */
  select?: Prisma.ViewportObjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ViewportObject
   */
  omit?: Prisma.ViewportObjectOmit<ExtArgs> | null
  /**
   * The data needed to create a ViewportObject.
   */
  data: Prisma.XOR<Prisma.ViewportObjectCreateInput, Prisma.ViewportObjectUncheckedCreateInput>
}

/**
 * ViewportObject createMany
 */
export type ViewportObjectCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ViewportObjects.
   */
  data: Prisma.ViewportObjectCreateManyInput | Prisma.ViewportObjectCreateManyInput[]
}

/**
 * ViewportObject update
 */
export type ViewportObjectUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ViewportObject
   */
  select?: Prisma.ViewportObjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ViewportObject
   */
  omit?: Prisma.ViewportObjectOmit<ExtArgs> | null
  /**
   * The data needed to update a ViewportObject.
   */
  data: Prisma.XOR<Prisma.ViewportObjectUpdateInput, Prisma.ViewportObjectUncheckedUpdateInput>
  /**
   * Choose, which ViewportObject to update.
   */
  where: Prisma.ViewportObjectWhereUniqueInput
}

/**
 * ViewportObject updateMany
 */
export type ViewportObjectUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ViewportObjects.
   */
  data: Prisma.XOR<Prisma.ViewportObjectUpdateManyMutationInput, Prisma.ViewportObjectUncheckedUpdateManyInput>
  /**
   * Filter which ViewportObjects to update
   */
  where?: Prisma.ViewportObjectWhereInput
  /**
   * Limit how many ViewportObjects to update.
   */
  limit?: number
}

/**
 * ViewportObject upsert
 */
export type ViewportObjectUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ViewportObject
   */
  select?: Prisma.ViewportObjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ViewportObject
   */
  omit?: Prisma.ViewportObjectOmit<ExtArgs> | null
  /**
   * The filter to search for the ViewportObject to update in case it exists.
   */
  where: Prisma.ViewportObjectWhereUniqueInput
  /**
   * In case the ViewportObject found by the `where` argument doesn't exist, create a new ViewportObject with this data.
   */
  create: Prisma.XOR<Prisma.ViewportObjectCreateInput, Prisma.ViewportObjectUncheckedCreateInput>
  /**
   * In case the ViewportObject was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ViewportObjectUpdateInput, Prisma.ViewportObjectUncheckedUpdateInput>
}

/**
 * ViewportObject delete
 */
export type ViewportObjectDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ViewportObject
   */
  select?: Prisma.ViewportObjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ViewportObject
   */
  omit?: Prisma.ViewportObjectOmit<ExtArgs> | null
  /**
   * Filter which ViewportObject to delete.
   */
  where: Prisma.ViewportObjectWhereUniqueInput
}

/**
 * ViewportObject deleteMany
 */
export type ViewportObjectDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ViewportObjects to delete
   */
  where?: Prisma.ViewportObjectWhereInput
  /**
   * Limit how many ViewportObjects to delete.
   */
  limit?: number
}

/**
 * ViewportObject findRaw
 */
export type ViewportObjectFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * ViewportObject aggregateRaw
 */
export type ViewportObjectAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * ViewportObject without action
 */
export type ViewportObjectDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ViewportObject
   */
  select?: Prisma.ViewportObjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ViewportObject
   */
  omit?: Prisma.ViewportObjectOmit<ExtArgs> | null
}
